{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","COLORS","useAccountBalance","accountId","balances","method","defaultData","useState","data","setData","API_KEY","URLSearchParams","window","location","search","get","SECRET","useEffect","fetch","timeout","agent","headers","then","response","json","useData","filterCurrency","regexp","currency_code","toUpperCase","negate","func","stableCoins","filter","ethCoins","btcCoins","otherCoins","bigShareOtherCoins","percentage","parseFloat","reducePercentage","totalPercentage","reduceUsdValue","totalUsdValue","usd_value","length","reduce","map","toFixed","Boolean","AccountChart","title","span","balance","index","value","color","columns","dataIndex","render","text","row","dot","align","dataSource","size","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f274c5f.chunk.js","sourcesContent":["import {PieChart} from 'react-minimal-pie-chart';\nimport CryptoJS from 'crypto-js';\nimport {useEffect, useState} from 'react'\nimport { Card, Table, Badge, Row, Col } from 'antd';\n\nfunction getSig(path, secret) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nconst useData = (method, path, defaultData) => {\n  const [data, setData] = useState(defaultData)\n  const API_KEY = new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\n  const SECRET = new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n  useEffect(() => {\n    fetch(\n      `https://api.3commas.io${path}`,\n      {\n        method: method,\n        timeout: 30000,\n        agent: '',\n        headers: {\n          'APIKEY': API_KEY,\n          'Signature': getSig(path, SECRET)\n        }\n      }\n    ).then(response => response.json()).then(setData)\n  }, [path])\n  return data\n}\n\nconst COLORS = [\n    \"#23c6c8\",\n    \"#1c84c6\",\n    \"#f8ac59\",\n    \"#ed5565\",\n    \"#12b495\",\n    \"#a83bb1\",\n    \"#d26140\",\n    \"#4060e4\",\n    \"#ebdf33\",\n    \"#0b8ca1\",\n    \"#7740de\",\n    \"#1a9d42\",\n    \"#d63f70\",\n    \"#59a5f8\",\n    \"#7ddc33\",\n    \"#65349d\",\n    \"#aa831c\",\n  ]\n\nconst useAccountBalance = ({accountId}) => {\n  const balances = useData(\"POST\", `/public/api/ver1/accounts/${accountId}/account_table_data`, [])\n  const filterCurrency = regexp => ({currency_code}) => (currency_code || '').toUpperCase().search(regexp) > -1;\n  const negate = func => (...attrs) => !func(...attrs)\n\n\n  const stableCoins = balances.filter(filterCurrency(/USD/));\n  const ethCoins = balances.filter(filterCurrency(/ETH/));\n  const btcCoins = balances.filter(filterCurrency(/BTC/));\n  const otherCoins = balances.filter(negate(filterCurrency(/USD/)))\n                             .filter(negate(filterCurrency(/ETH/)))\n                             .filter(negate(filterCurrency(/BTC/)));\n  const bigShareOtherCoins = otherCoins.filter(({percentage}) => parseFloat(percentage) >= 10)\n  const reducePercentage = (totalPercentage, {percentage})  => parseFloat(totalPercentage) + parseFloat(percentage);\n  const reduceUsdValue = (totalUsdValue, {usd_value}) => parseFloat(totalUsdValue) + parseFloat(usd_value);\n  return [\n    stableCoins.length > 0 && {\n      currency_code: 'Stable coins',\n      percentage: stableCoins.reduce(reducePercentage, 0),\n      usd_value: stableCoins.reduce(reduceUsdValue, 0),\n    },\n    ethCoins.length > 0 && {\n      currency_code: 'ETH',\n      percentage: ethCoins.reduce(reducePercentage, 0),\n      usd_value: ethCoins.reduce(reduceUsdValue, 0),\n    },\n    btcCoins.length > 0 && {\n      currency_code: 'BTC',\n      percentage: btcCoins.reduce(reducePercentage, 0),\n      usd_value: btcCoins.reduce(reduceUsdValue, 0),\n    },\n    otherCoins.length > 0 && {\n      currency_code: bigShareOtherCoins.length > 0 ?\n        <>\n          Other Coins:\n          <br/>\n          <ul>\n            {bigShareOtherCoins.map(({currency_code, percentage}) =>\n              <li key={currency_code}>{currency_code}: {parseFloat(percentage).toFixed(2)}%</li>\n            )}\n          </ul>\n        </>\n        : 'Other Coins',\n      percentage: otherCoins.reduce(reducePercentage, 0),\n      usd_value: otherCoins.reduce(reduceUsdValue, 0),\n    },\n  ].filter(Boolean);\n}\n\nconst AccountChart = ({accountId}) => {\n  const balances = useAccountBalance({accountId});\n  return (\n    <Card title=\"Account\">\n      <Row>\n        <Col span={8}>\n          <PieChart\n            data={\n              balances.map((balance, index) => ({\n                title: balance.currency_code,\n                value: balance.percentage,\n                color: COLORS[index % COLORS.length]\n              }))\n            }\n          />\n        </Col>\n        <Col span={16}>\n          <Table columns={[\n            {title: \"Color\",\n              dataIndex: 'percentage',\n              render: (text, row, index) => {\n                return <Badge dot color={COLORS[index % COLORS.length]}/>\n              }\n            },\n            {\n              title: 'Currency',\n              dataIndex: 'currency_code',\n            }, {\n              title: '$',\n              dataIndex: 'usd_value',\n              align:\"right\",\n              render: (value) => parseFloat(value).toFixed(2)\n            }, {\n              title: 'Share, %',\n              dataIndex: 'percentage',\n              align:\"right\",\n              render: (value) => parseFloat(value).toFixed(2)\n            }\n\n          ]} dataSource={balances} size=\"small\" />\n        </Col>\n      </Row>\n    </Card>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AccountChart accountId='summary' />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}