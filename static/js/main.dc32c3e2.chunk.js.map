{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","useData","method","defaultData","useState","data","setData","API_KEY","URLSearchParams","window","location","search","get","SECRET","useEffect","fetch","timeout","agent","headers","then","response","json","COLORS","AccountChart","accountId","balances","title","style","width","map","balance","index","currency_code","value","percentage","color","length","columns","dataIndex","render","text","row","count","parseInt","backgroundColor","align","parseFloat","toFixed","dataSource","size","App","accounts","className","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"uSAKA,SAASA,EAAOC,EAAMC,GACpB,OAAOC,IAASC,KAAKC,KAAKC,OAAOH,IAASC,KAAKG,OAAQL,GACpDM,OAAOP,GACPQ,WACAC,SAASP,IAASQ,IAAIC,KAE3B,IAAMC,EAAU,SAACC,EAAQb,EAAMc,GAC7B,MAAwBC,mBAASD,GAAjC,mBAAOE,EAAP,KAAaC,EAAb,KACMC,EAAU,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,YAAc,GACxEC,EAAS,IAAIL,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,WAAa,GAgB5E,OAdAE,qBAAU,WACRC,MAAM,yBAAD,OACsB1B,GACzB,CACEa,OAAQA,EACRc,QAAS,IACTC,MAAO,GACPC,QAAS,CACP,OAAUX,EACV,UAAanB,EAAOC,EAAMwB,MAG9BM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,KAAKb,KACxC,CAACjB,IACGgB,GAGHiB,EAAS,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGEC,EAAe,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACfC,EAAWxB,EAAQ,OAAD,oCAAsCuB,EAAtC,uBAAsE,IAChG,OAAO,eAAC,IAAD,CAAME,MAAM,UAAUC,MAAO,CAACC,MAAO,KAArC,UACH,cAAC,WAAD,CACEvB,KACEoB,EAASI,KAAI,SAACC,EAASC,GAAV,MAAqB,CAChCL,MAAOI,EAAQE,cACfC,MAAOH,EAAQI,WACfC,MAAOb,EAAOS,EAAQT,EAAOc,cAIrC,cAAC,IAAD,CAAOC,QAAS,CACd,CAACX,MAAO,QACNY,UAAW,aACXC,OAAQ,SAACC,EAAMC,EAAKV,GACpB,OAAO,cAAC,IAAD,CACLW,MAAOC,SAASH,GAChBb,MAAO,CAAEiB,gBAAiBtB,EAAOS,EAAQT,EAAOc,aAGpD,CACAV,MAAO,WACPY,UAAW,iBACV,CACDZ,MAAO,IACPY,UAAW,YACTO,MAAM,QACNN,OAAQ,SAACN,GAAD,OAAWa,WAAWb,GAAOc,QAAQ,MAC7CC,WAAYvB,EAAUwB,KAAK,cAalBC,MATf,WACE,IAAMC,EAAWlD,EAAQ,MAAO,4BAA6B,IAC7D,OACE,qBAAKmD,UAAU,MAAf,SACGD,EAAStB,KAAI,gBAAEwB,EAAF,EAAEA,GAAF,OAAU,cAAC,EAAD,CAAc7B,UAAW6B,GAASA,SC9EjDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASvB,OACP,cAAC,IAAMwB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.dc32c3e2.chunk.js","sourcesContent":["import {PieChart} from 'react-minimal-pie-chart';\nimport CryptoJS from 'crypto-js';\nimport {useEffect, useState} from 'react'\nimport { Card, Table, Badge } from 'antd';\n\nfunction getSig(path, secret) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nconst useData = (method, path, defaultData) => {\n  const [data, setData] = useState(defaultData)\n  const API_KEY = new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\n  const SECRET = new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n  useEffect(() => {\n    fetch(\n      `https://api.3commas.io${path}`,\n      {\n        method: method,\n        timeout: 30000,\n        agent: '',\n        headers: {\n          'APIKEY': API_KEY,\n          'Signature': getSig(path, SECRET)\n        }\n      }\n    ).then(response => response.json()).then(setData)\n  }, [path])\n  return data\n}\n\nconst COLORS = [\n    \"#23c6c8\",\n    \"#1c84c6\",\n    \"#f8ac59\",\n    \"#ed5565\",\n    \"#12b495\",\n    \"#a83bb1\",\n    \"#d26140\",\n    \"#4060e4\",\n    \"#ebdf33\",\n    \"#0b8ca1\",\n    \"#7740de\",\n    \"#1a9d42\",\n    \"#d63f70\",\n    \"#59a5f8\",\n    \"#7ddc33\",\n    \"#65349d\",\n    \"#aa831c\",\n  ]\n\nconst AccountChart = ({accountId}) => {\n  const balances = useData(\"POST\", `/public/api/ver1/accounts/${accountId}/account_table_data`, [])\nreturn <Card title=\"Account\" style={{width: 600}}>\n    <PieChart\n      data={\n        balances.map((balance, index) => ({\n          title: balance.currency_code,\n          value: balance.percentage,\n          color: COLORS[index % COLORS.length]\n        }))\n        }\n    />\n  <Table columns={[\n    {title: \"Color\",\n      dataIndex: 'percentage',\n      render: (text, row, index) => {\n      return <Badge\n        count={parseInt(text)}\n        style={{ backgroundColor: COLORS[index % COLORS.length] }} />\n      }\n    },\n    {\n    title: 'Currency',\n    dataIndex: 'currency_code',\n  }, {\n    title: '$',\n    dataIndex: 'usd_value',\n      align:\"right\",\n      render: (value) => parseFloat(value).toFixed(2)\n  }]} dataSource={balances} size=\"small\" />\n  </Card>\n}\n\nfunction App() {\n  const accounts = useData(\"GET\", \"/public/api/ver1/accounts\", []);\n  return (\n    <div className=\"App\">\n      {accounts.map(({id}) => <AccountChart accountId={id} key={id} />)}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}